            Why source control?
It is a type of back up / Archive
Versioning /History
Undo cganges
Comparing
Collaboration /Teamwork
Blame /Learning moment
Isolation of changes
Experimentation
Context Switching
Code review
  Who needs git?
Software developers/engineer/programmers
Freelancer
Web Designers
Graphic Artists
Share code /Open source

            Source control options
Two main types
Centralized
Decentralized /Distributed

                  What is Git
Distributed source control system
Not required to be decentralized
Massively scales
Open Source
Developed for Linux project requirements
Most operations are local
Very fast
Active community
Most popular

Git Key Concepts
Repository contains files, history ,config managed by Git
Three states of Git
Working directory (file on my computer)
Staging area-pre-commit holding area
Commit-Git repository
.git folder contains all the repository

Remote Repository
Master branch
In git branches contains commit




       Install git
 
This option is best for those who want to get up and running quickly with Git, those who prefer a widely-used stable version, or those who are not looking for the newest available options. If you are looking for the most recently release, you should jump to the section on installing from source.

We will be using the open-source package manager tool DNF, which stands for Dandified YUM the next-generation version of the Yellowdog Updater, Modified (that is, yum). DNF is a package manager that is now the default package manager for Red Hat based Linux systems like CentOS. It will let you install, update, and remove software packages on your server.

First, use the DNF package management tools to update your local package index.

    sudo dnf update -y

 

The -y flag is used to alert the system that we are aware that we are making changes, preventing the terminal from prompting us to confirm.

With the update complete, you can install Git:

    sudo dnf install git -y

 

You can confirm that you have installed Git correctly by running the following command:

$git --version


Setting Up Git

Now that you have Git installed, you should configure it so that the generated commit messages will contain your correct information.

This can be achieved by using the git config command. Specifically, we need to provide our name and email address because Git embeds this information into each commit we do. We can go ahead and add this information by typing:

    git config --global user.name "Your Name"
    git config --global user.email "youremail@domain.com"

 

We can display all of the configuration items that have been set by typing:

    git config --list

 

Output
user.name=Your Name
user.email=youremail@domain.com
...

The information you enter is stored in your Git configuration file, which you can optionally edit by hand with a text editor like this:

    vi ~/.gitconfig

 
~/.gitconfig contents

[user]
  name = Your Name
  email = youremail@domain.com

 

Press ESC then :q to exit the text editor.

There are many other options that you can set, but these are the two essential ones needed. If you skip this step, youâ€™ll likely see warnings when you commit to Git. This makes more work for you because you will then have to revise the commits you have done with the corrected information.

     Introduction to Github
Create a demo repo  (fresh repo)
echo "# git-demo-repotest" >> README.md
git init <repo name>
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/Golomichael/git-demo-repotest.git
git push -u origin main
Clone a repository
git clone https://github.com/Golomichael/git-demo-repotest2.git

cd /<git-repo>
git status (to verify)
echo "I am genius" > newfile.txt
cat newfile.txt (to verify)
git add newfile.txt (to add the file in our staging area so we can commit it)
git status (to verify any changes made) 

Commit our changes
git commit -m " Adding newfile.txt" to take it from staging area to our repo
git push origin master (to push it in our branch)
origin refers to the copy of our repository
mater refers to our deault branch 


github error: unable to read askpass response from gnome-ssh-askpass
# Root Cause
$cat /etc/profile.d/gnome-ssh-askpass.sh
SSH_ASKPASS=/usr/libexec/openssh/gnome-ssh-askpass 

# Fixed
$unset SSH_ASKPASS
then
$git push origin master
